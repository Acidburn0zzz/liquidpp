#pragma once

#include <vector>

#include @LIQUIDPP_STRING_VIEW_HEADER@

#cmakedefine LIQUIDPP_HAVE_RAPIDJSON
#cmakedefine LIQUIDPP_HAVE_BOOST_SMALL_VECTOR

#ifdef LIQUIDPP_HAVE_BOOST_SMALL_VECTOR
#include <boost/container/small_vector.hpp>
#endif

namespace liquidpp
{
   using string_view = @LIQUIDPP_STRING_VIEW_CLASS@;

#ifdef LIQUIDPP_HAVE_BOOST_SMALL_VECTOR
   template<typename T, size_t S>
   using SmallVector = boost::container::small_vector<T, S>;
#else
   template<typename T, size_t S>
   using SmallVector = std::vector<T>;
#endif
   
   namespace literals
   {
      constexpr string_view operator""_sv(const char* str, std::size_t len)
      {
         return string_view{str, len};
      }
   }
}
